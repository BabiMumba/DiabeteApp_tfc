package bm.babimumba.diabete.utils

import android.util.Log
import bm.babimumba.diabete.model.DonneeMedicale
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

/**
 * Gestionnaire d'int√©grit√© des donn√©es m√©dicales
 * Coordonne le hachage et l'enregistrement sur la blockchain via le backend Node.js
 */
class IntegrityManager {
    
    companion object {
        private const val TAG = "IntegrityManager"
    }
    
    private val blockchainService = BlockchainService()
    private val scope = CoroutineScope(Dispatchers.IO)
    
    /**
     * Traite une nouvelle donn√©e m√©dicale avec int√©grit√© blockchain
     * @param donnee La donn√©e m√©dicale √† traiter
     * @param onSuccess Callback appel√© en cas de succ√®s avec le hash g√©n√©r√©
     * @param onError Callback appel√© en cas d'erreur
     */
    fun processMedicalData(
        donnee: DonneeMedicale,
        onSuccess: (String) -> Unit,
        onError: (String) -> Unit
    ) {
        scope.launch {
            try {
                Log.d(TAG, "üîó D√©but du traitement de la donn√©e m√©dicale")
                
                // 1. Pr√©parer les donn√©es m√©dicales pour le backend
                val medicalData = mapOf<String, Any>(
                    "dateHeure" to (donnee.dateHeure ?: ""),
                    "glycemie" to (donnee.glycemie ?: ""),
                    "repas" to (donnee.repas ?: ""),
                    "insuline" to (donnee.insuline ?: ""),
                    "activite" to (donnee.activite ?: ""),
                    "commentaire" to (donnee.commentaire ?: ""),
                    "source" to (donnee.source ?: "")
                )
                
                // 2. Enregistrer le hash sur la blockchain via le backend
                val hash = blockchainService.registerHashOnBlockchain(
                    patientId = donnee.patientId,
                    medicalData = medicalData
                )
                
                Log.d(TAG, "‚úÖ Hash enregistr√© avec succ√®s: $hash")
                
                // 3. Retourner le succ√®s avec le hash
                withContext(Dispatchers.Main) {
                    onSuccess(hash)
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors du traitement de la donn√©e m√©dicale", e)
                withContext(Dispatchers.Main) {
                    onError("Erreur d'int√©grit√©: ${e.message}")
                }
            }
        }
    }
    
    /**
     * V√©rifie l'int√©grit√© d'une donn√©e m√©dicale
     * @param donnee La donn√©e √† v√©rifier
     * @param onResult Callback avec le r√©sultat de la v√©rification
     */
    fun verifyMedicalDataIntegrity(
        donnee: DonneeMedicale,
        onResult: (Boolean, String?) -> Unit
    ) {
        scope.launch {
            try {
                Log.d(TAG, "üîç D√©but de la v√©rification d'int√©grit√©")
                
                // 1. Pr√©parer les donn√©es m√©dicales pour la v√©rification
                val medicalData = mapOf<String, Any>(
                    "dateHeure" to (donnee.dateHeure ?: ""),
                    "glycemie" to (donnee.glycemie ?: ""),
                    "repas" to (donnee.repas ?: ""),
                    "insuline" to (donnee.insuline ?: ""),
                    "activite" to (donnee.activite ?: ""),
                    "commentaire" to (donnee.commentaire ?: ""),
                    "source" to (donnee.source ?: "")
                )
                
                // 2. V√©rifier sur la blockchain via le backend
                val timestamp = donnee.dateHeure.toLongOrNull() ?: System.currentTimeMillis()
                val blockchainVerified = blockchainService.verifyHashOnBlockchain(
                    patientId = donnee.patientId,
                    timestamp = timestamp,
                    medicalData = medicalData
                )
                
                Log.d(TAG, "üîç V√©rification d'int√©grit√© termin√©e: $blockchainVerified")
                
                withContext(Dispatchers.Main) {
                    onResult(blockchainVerified, "Hash v√©rifi√© via blockchain")
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors de la v√©rification d'int√©grit√©", e)
                withContext(Dispatchers.Main) {
                    onResult(false, "Erreur: ${e.message}")
                }
            }
        }
    }
    
    /**
     * V√©rifie l'int√©grit√© de plusieurs donn√©es m√©dicales
     * @param donnees Liste des donn√©es √† v√©rifier
     * @param onResult Callback avec les r√©sultats de v√©rification
     */
    fun verifyMultipleMedicalDataIntegrity(
        donnees: List<DonneeMedicale>,
        onResult: (Map<String, Boolean>) -> Unit
    ) {
        scope.launch {
            try {
                Log.d(TAG, "üîç D√©but de la v√©rification multiple: ${donnees.size} donn√©es")
                
                val results = mutableMapOf<String, Boolean>()
                
                donnees.forEach { donnee ->
                    try {
                        val medicalData = mapOf<String, Any>(
                            "dateHeure" to (donnee.dateHeure ?: ""),
                            "glycemie" to (donnee.glycemie ?: ""),
                            "repas" to (donnee.repas ?: ""),
                            "insuline" to (donnee.insuline ?: ""),
                            "activite" to (donnee.activite ?: ""),
                            "commentaire" to (donnee.commentaire ?: ""),
                            "source" to (donnee.source ?: "")
                        )
                        
                        val timestamp = donnee.dateHeure.toLongOrNull() ?: System.currentTimeMillis()
                        val verified = blockchainService.verifyHashOnBlockchain(
                            patientId = donnee.patientId,
                            timestamp = timestamp,
                            medicalData = medicalData
                        )
                        
                        results[donnee.id] = verified
                        Log.d(TAG, "‚úÖ Donn√©e ${donnee.id}: $verified")
                        
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur pour la donn√©e ${donnee.id}:", e)
                        results[donnee.id] = false
                    }
                }
                
                Log.d(TAG, "üîç V√©rification multiple termin√©e: ${results.size} donn√©es v√©rifi√©es")
                
                withContext(Dispatchers.Main) {
                    onResult(results)
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors de la v√©rification multiple", e)
                withContext(Dispatchers.Main) {
                    onResult(emptyMap())
                }
            }
        }
    }
    
    /**
     * Test de connectivit√© avec le backend
     * @param onResult Callback avec le r√©sultat du test
     */
    fun testBackendConnection(onResult: (Boolean) -> Unit) {
        scope.launch {
            try {
                Log.d(TAG, "üß™ Test de connexion au backend")
                val isConnected = blockchainService.testConnection()
                
                Log.d(TAG, "üß™ R√©sultat du test: $isConnected")
                
                withContext(Dispatchers.Main) {
                    onResult(isConnected)
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors du test de connexion", e)
                withContext(Dispatchers.Main) {
                    onResult(false)
                }
            }
        }
    }
} 